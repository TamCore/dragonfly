name: Reusable Container Build Workflow

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
      tag:
        required: true
        type: string
      tag_latest:
        required: false
        type: boolean
      image:
        required: true
        type: string
      registry:
        required: true
        type: string
      registry_username:
        required: true
        type: string
      fetch_release:
        required: false
        type: boolean
      release_version:
        required: false
        type: string

    secrets:
      registry_password:
        required: true
      GH_TOKEN:
        required: false

jobs:
  container-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - tag: alpine
            dockerfile: tools/docker/Dockerfile.alpine
            tag_main: 'false'
          - tag: ubuntu
            dockerfile: tools/docker/Dockerfile.ubuntu
            tag_main: 'true'
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: true

      - if: inputs.fetch_release
        name: Fetch release asset
        uses: dsaltares/fetch-gh-release-asset@1.1.0
        with:
          version: "tags/${{ inputs.release_version }}"
          regex: true
          file: "dragonfly-.*\\.tar\\.gz"
          target: 'releases/'
          token: ${{ secrets.GH_TOKEN }}

      - if: inputs.fetch_release
        name: Extract artifacts
        run: |
          echo "Event prerelease ${{ github.event.release.prerelease }}"
          echo "Input prerelease ${{ github.event.inputs.PRERELEASE }}"
          ls -l
          ls -l releases
          for f in releases/*.tar.gz; do tar xvfz $f -C releases; done
          rm releases/*.tar.gz

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry_username }}
          password: ${{ secrets.registry_password }}

      - if: matrix.tag_main == 'true'
        name: Docker meta
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ inputs.image }}
          tags: |
            type=raw,value=latest,enable=${{ inputs.tag_latest }}
            type=raw,value=${{ inputs.tag }}
            type=raw,value=${{ inputs.tag }}-${{ matrix.tag }}
            type=raw,value=${{ inputs.release_version }},enable=${{ inputs.release_version != '' }}
            type=raw,value=${{ inputs.release_version }}-${{ matrix.tag }},enable=${{ inputs.release_version != '' }}

      - if: matrix.tag_main == 'false'
        name: Docker meta
        id: metadata2
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ inputs.image }}
          tags: |
            type=raw,value=${{ inputs.tag }}-${{ matrix.tag }}
            type=raw,value=${{ inputs.release_version }},enable=${{ inputs.release_version != '' }}
            type=raw,value=${{ inputs.release_version }}-${{ matrix.tag }},enable=${{ inputs.release_version != '' }}

      - name: Build release image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          build-args: |
            QEMU_CPU=max,pauth-impdef=on
          push: true
          tags: |
            ${{ steps.metadata.outputs.tags }}
            ${{ steps.metadata2.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          file: ${{ matrix.dockerfile }}-${{ inputs.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
